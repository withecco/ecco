services:
  postgres:
    image: postgres:17-alpine
    container_name: ecco-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ecco
      POSTGRES_USER: ecco
      POSTGRES_PASSWORD: ecco-dev-password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/postgres/migrations:/docker-entrypoint-initdb.d
    networks:
      - network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecco -d ecco"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:8-alpine
    container_name: ecco-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: installer  # Stop at installer stage for development
    container_name: ecco-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - API_PORT=${API_PORT}
      - DATABASE_URL=${DATABASE_URL}
      - NODE_ENV=${NODE_ENV}
      - REDIS_URL=${REDIS_URL}
    volumes:
      # Mount source code for development hot reload
      - ./apps/api/src:/app/apps/api/src
      - ./packages:/app/packages
      # Exclude node_modules from bind mount
      - /app/node_modules
    networks:
      - network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["bun", "--watch", "run", "apps/api/src/index.ts"]

networks:
  network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
